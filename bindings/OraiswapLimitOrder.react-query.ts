/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.20.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import {Addr, Uint128, Binary, AssetInfo, Decimal, OrderDirection, Cw20ReceiveMsg, Asset, OrderFilter} from "./types";
import {InstantiateMsg, ExecuteMsg, QueryMsg, MigrateMsg, ContractInfoResponse, LastOrderIdResponse, OrderResponse, OrderBookResponse, OrderBooksResponse, OrdersResponse, TickResponse, TicksResponse} from "./OraiswapLimitOrder.types";
import { OraiswapLimitOrderQueryClient, OraiswapLimitOrderClient } from "./OraiswapLimitOrder.client";
export interface OraiswapLimitOrderReactQuery<TResponse, TData = TResponse> {
  client: OraiswapLimitOrderQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface OraiswapLimitOrderLastOrderIdQuery<TData> extends OraiswapLimitOrderReactQuery<LastOrderIdResponse, TData> {}
export function useOraiswapLimitOrderLastOrderIdQuery<TData = LastOrderIdResponse>({
  client,
  options
}: OraiswapLimitOrderLastOrderIdQuery<TData>) {
  return useQuery<LastOrderIdResponse, Error, TData>(["oraiswapLimitOrderLastOrderId", client?.contractAddress], () => client ? client.lastOrderId() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface OraiswapLimitOrderTicksQuery<TData> extends OraiswapLimitOrderReactQuery<TicksResponse, TData> {
  args: {
    assetInfos: AssetInfo[];
    direction: OrderDirection;
    limit?: number;
    orderBy?: number;
    startAfter?: Decimal;
  };
}
export function useOraiswapLimitOrderTicksQuery<TData = TicksResponse>({
  client,
  args,
  options
}: OraiswapLimitOrderTicksQuery<TData>) {
  return useQuery<TicksResponse, Error, TData>(["oraiswapLimitOrderTicks", client?.contractAddress, JSON.stringify(args)], () => client ? client.ticks({
    assetInfos: args.assetInfos,
    direction: args.direction,
    limit: args.limit,
    orderBy: args.orderBy,
    startAfter: args.startAfter
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface OraiswapLimitOrderTickQuery<TData> extends OraiswapLimitOrderReactQuery<TickResponse, TData> {
  args: {
    assetInfos: AssetInfo[];
    direction: OrderDirection;
    price: Decimal;
  };
}
export function useOraiswapLimitOrderTickQuery<TData = TickResponse>({
  client,
  args,
  options
}: OraiswapLimitOrderTickQuery<TData>) {
  return useQuery<TickResponse, Error, TData>(["oraiswapLimitOrderTick", client?.contractAddress, JSON.stringify(args)], () => client ? client.tick({
    assetInfos: args.assetInfos,
    direction: args.direction,
    price: args.price
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface OraiswapLimitOrderOrdersQuery<TData> extends OraiswapLimitOrderReactQuery<OrdersResponse, TData> {
  args: {
    assetInfos: AssetInfo[];
    direction?: OrderDirection;
    filter: OrderFilter;
    limit?: number;
    orderBy?: number;
    startAfter?: number;
  };
}
export function useOraiswapLimitOrderOrdersQuery<TData = OrdersResponse>({
  client,
  args,
  options
}: OraiswapLimitOrderOrdersQuery<TData>) {
  return useQuery<OrdersResponse, Error, TData>(["oraiswapLimitOrderOrders", client?.contractAddress, JSON.stringify(args)], () => client ? client.orders({
    assetInfos: args.assetInfos,
    direction: args.direction,
    filter: args.filter,
    limit: args.limit,
    orderBy: args.orderBy,
    startAfter: args.startAfter
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface OraiswapLimitOrderOrderQuery<TData> extends OraiswapLimitOrderReactQuery<OrderResponse, TData> {
  args: {
    assetInfos: AssetInfo[];
    orderId: number;
  };
}
export function useOraiswapLimitOrderOrderQuery<TData = OrderResponse>({
  client,
  args,
  options
}: OraiswapLimitOrderOrderQuery<TData>) {
  return useQuery<OrderResponse, Error, TData>(["oraiswapLimitOrderOrder", client?.contractAddress, JSON.stringify(args)], () => client ? client.order({
    assetInfos: args.assetInfos,
    orderId: args.orderId
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface OraiswapLimitOrderOrderBooksQuery<TData> extends OraiswapLimitOrderReactQuery<OrderBooksResponse, TData> {
  args: {
    limit?: number;
    orderBy?: number;
    startAfter?: number[];
  };
}
export function useOraiswapLimitOrderOrderBooksQuery<TData = OrderBooksResponse>({
  client,
  args,
  options
}: OraiswapLimitOrderOrderBooksQuery<TData>) {
  return useQuery<OrderBooksResponse, Error, TData>(["oraiswapLimitOrderOrderBooks", client?.contractAddress, JSON.stringify(args)], () => client ? client.orderBooks({
    limit: args.limit,
    orderBy: args.orderBy,
    startAfter: args.startAfter
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface OraiswapLimitOrderOrderBookQuery<TData> extends OraiswapLimitOrderReactQuery<OrderBookResponse, TData> {
  args: {
    assetInfos: AssetInfo[];
  };
}
export function useOraiswapLimitOrderOrderBookQuery<TData = OrderBookResponse>({
  client,
  args,
  options
}: OraiswapLimitOrderOrderBookQuery<TData>) {
  return useQuery<OrderBookResponse, Error, TData>(["oraiswapLimitOrderOrderBook", client?.contractAddress, JSON.stringify(args)], () => client ? client.orderBook({
    assetInfos: args.assetInfos
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface OraiswapLimitOrderContractInfoQuery<TData> extends OraiswapLimitOrderReactQuery<ContractInfoResponse, TData> {}
export function useOraiswapLimitOrderContractInfoQuery<TData = ContractInfoResponse>({
  client,
  options
}: OraiswapLimitOrderContractInfoQuery<TData>) {
  return useQuery<ContractInfoResponse, Error, TData>(["oraiswapLimitOrderContractInfo", client?.contractAddress], () => client ? client.contractInfo() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface OraiswapLimitOrderRemoveOrderBookMutation {
  client: OraiswapLimitOrderClient;
  msg: {
    assetInfos: AssetInfo[];
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useOraiswapLimitOrderRemoveOrderBookMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, OraiswapLimitOrderRemoveOrderBookMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, OraiswapLimitOrderRemoveOrderBookMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.removeOrderBook(msg, fee, memo, funds), options);
}
export interface OraiswapLimitOrderExecuteOrderBookPairMutation {
  client: OraiswapLimitOrderClient;
  msg: {
    assetInfos: AssetInfo[];
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useOraiswapLimitOrderExecuteOrderBookPairMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, OraiswapLimitOrderExecuteOrderBookPairMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, OraiswapLimitOrderExecuteOrderBookPairMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.executeOrderBookPair(msg, fee, memo, funds), options);
}
export interface OraiswapLimitOrderExecuteOrderMutation {
  client: OraiswapLimitOrderClient;
  msg: {
    askAsset: Asset;
    offerInfo: AssetInfo;
    orderId: number;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useOraiswapLimitOrderExecuteOrderMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, OraiswapLimitOrderExecuteOrderMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, OraiswapLimitOrderExecuteOrderMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.executeOrder(msg, fee, memo, funds), options);
}
export interface OraiswapLimitOrderCancelOrderMutation {
  client: OraiswapLimitOrderClient;
  msg: {
    assetInfos: AssetInfo[];
    orderId: number;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useOraiswapLimitOrderCancelOrderMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, OraiswapLimitOrderCancelOrderMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, OraiswapLimitOrderCancelOrderMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.cancelOrder(msg, fee, memo, funds), options);
}
export interface OraiswapLimitOrderUpdateOrderMutation {
  client: OraiswapLimitOrderClient;
  msg: {
    assets: Asset[];
    orderId: number;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useOraiswapLimitOrderUpdateOrderMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, OraiswapLimitOrderUpdateOrderMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, OraiswapLimitOrderUpdateOrderMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateOrder(msg, fee, memo, funds), options);
}
export interface OraiswapLimitOrderSubmitOrderMutation {
  client: OraiswapLimitOrderClient;
  msg: {
    assets: Asset[];
    direction: OrderDirection;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useOraiswapLimitOrderSubmitOrderMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, OraiswapLimitOrderSubmitOrderMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, OraiswapLimitOrderSubmitOrderMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.submitOrder(msg, fee, memo, funds), options);
}
export interface OraiswapLimitOrderCreateOrderBookPairMutation {
  client: OraiswapLimitOrderClient;
  msg: {
    baseCoinInfo: AssetInfo;
    minBaseCoinAmount: Uint128;
    precision?: Decimal;
    quoteCoinInfo: AssetInfo;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useOraiswapLimitOrderCreateOrderBookPairMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, OraiswapLimitOrderCreateOrderBookPairMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, OraiswapLimitOrderCreateOrderBookPairMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.createOrderBookPair(msg, fee, memo, funds), options);
}
export interface OraiswapLimitOrderUpdateAdminMutation {
  client: OraiswapLimitOrderClient;
  msg: {
    admin: Addr;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useOraiswapLimitOrderUpdateAdminMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, OraiswapLimitOrderUpdateAdminMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, OraiswapLimitOrderUpdateAdminMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateAdmin(msg, fee, memo, funds), options);
}
export interface OraiswapLimitOrderReceiveMutation {
  client: OraiswapLimitOrderClient;
  msg: Cw20ReceiveMsg;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useOraiswapLimitOrderReceiveMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, OraiswapLimitOrderReceiveMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, OraiswapLimitOrderReceiveMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.receive(msg, fee, memo, funds), options);
}